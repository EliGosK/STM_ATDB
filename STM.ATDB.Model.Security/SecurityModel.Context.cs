//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STM.ATDB.Model.Security
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SecurityEntities : DbContext
    {
        public SecurityEntities()
            : base("name=SecurityEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Screen> Screens { get; set; }
        public virtual DbSet<ScreenPermission> ScreenPermissions { get; set; }
        public virtual DbSet<ScreenPermissionMapping> ScreenPermissionMappings { get; set; }
        public virtual DbSet<SecurityMapping> SecurityMappings { get; set; }
    
        public virtual ObjectResult<ScreenPermissionListResult> GetScreenPermissionList(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ScreenPermissionListResult>("GetScreenPermissionList", userIDParameter);
        }
    
        public virtual ObjectResult<UserAndRoleListResult> GetUserAndRoleList(string userID, string userRole)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserAndRoleListResult>("GetUserAndRoleList", userIDParameter, userRoleParameter);
        }
    
        public virtual ObjectResult<ScreenPermissionListTreeResult> GetScreenPermissionListTree(string userID, string userRole)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ScreenPermissionListTreeResult>("GetScreenPermissionListTree", userIDParameter, userRoleParameter);
        }
    }
}

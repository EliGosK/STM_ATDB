@using STM.ATDB.MvcWeb.Models
@using STM.ATDB.MvcWeb.App_Helpers
@using STM.ATDB.Core
@using STM.ATDB.MvcWeb.Resources;

@model GoOutReasonViewModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="form-container" class="panel-group col-md-12 no-gutter">
    <form id="search-container" class="col-md-12">
        <div class="panel-group col-md-12 well well-sm animated fadeIn">
            <h3><i class="fa fa-fw fa-th-list"></i> Criteria</h3>
            <div class="row padding-bottom-10">
                <div class="col-md-6">
                    <div class="row dx-field clearfix">
                        <div class="col-md-2 dx-field-label dx-lebel-goout text-right">Date From</div>
                        <div class="col-md-10 dx-field-value dx-value-goout">
                            <table>
                                <tr>
                                    <td>
                                        @(Html.DevExtreme().DateBox()
                                            .ID("DateFrom")
                                            .Min(new DateTime(2000, 1, 1))
                                            .Max(new DateTime(2029, 12, 31))
                                            .Value(DateTime.Now)
                                            .DisplayFormat(ConstantValues.DateFormat)
                                            .Width(132)
                                        )

                                    </td>
                                    <td style="padding:0px 10px 0px 10px; color:#8c8c8c;">To</td>
                                    <td>
                                        @(Html.DevExtreme().DateBox()
                                            .ID("DateTo")
                                            .Min(new DateTime(2000, 1, 1))
                                            .Max(new DateTime(2029, 12, 31))
                                            .Value(DateTime.Now)
                                            .DisplayFormat(ConstantValues.DateFormat)
                                            .Width(132)
                                        )
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row padding-bottom-10">
                <div class="col-md-6">
                    <div class="row dx-field clearfix">
                        <div class="col-md-7 dx-field-label dx-lebel-goout text-right">Emp Code</div>
                        <div class="col-md-5 dx-field-value dx-value-goout">
                            @(Html.DevExtreme().TextBox()
                                        .ID("txtEmployee")
                                        //.MaxLength(40)
                            )
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="row dx-field clearfix">
                        <div class="col-md-7 dx-field-label  dx-lebel-goout text-right">Emp Name</div>
                        <div class="col-md-5 dx-field-value dx-value-goout">
                            @(Html.DevExtreme().TextBox()
                                        .ID("txtFullName")
                                        //.MaxLength(40)
                            )
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-12">
                        <div class="pull-right">
                            @(Html.DevExtreme().Button()
                                .ID("btnSearch")
                                .Text("Search")
                                .OnClick("onbtnSearchClick")
                                .Type(ButtonType.Success)
                                .Icon("fa fa-search")
                            )
                            @(Html.DevExtreme().Button()
                                .ID("btnClear")
                                .Text("Clear")
                                .OnClick("onbtnClearClick")
                                .Type(ButtonType.Danger)
                                .Icon("fa fa-eraser")
                            )
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>

    <form id="grid-container" class="panel-group col-md-12">
        <div class="well well-sm animated fadeIn">
            <div class="row padding-bottom-10">
                <div class="col-md-9">
                    <h3><i class="fa fa-fw fa-th-list"></i> Go Out Reason Result List </h3>
                </div>
                <div class="col-md-3 text-align-right ">
                    @(Html.DevExtreme().Button()
                                .ID("btnAdd")
                                .Text("Add")
                                .OnClick("onButtonAddClick")
                                .Type(ButtonType.Default)
                                .Disabled(!ViewContext.Controller.HasPermission("ADS020", PermissionName.Add.Value))
                                .Icon("fa fa-plus-circle")
                    )
                </div>
            </div>

            <div>
                @(Html.DevExtreme().DataGrid<GoOutReasonViewModel>()
                    .ID("gridContainer")
                    .DataSource(d => d.Mvc().Controller("GoOutReason")
                                    .LoadAction("SearchGoOutReason")
                                    .Key("GoOutID")
                                    .LoadParams(new { isFirstLoad = new JS ("function() { return isFirstLoad; }")
                                                    , EmpCode = new JS("getSearchEmployee")
                                                    , EmpName = new JS("getSearchFullname")
                                                    , StartTime = new JS("getSearchDateFrom")
                                                    , EndTime = new JS("getSearchDateTo") })
                            )
                    .AllowColumnResizing(true)
                    .ColumnMinWidth(40)
                    .ColumnAutoWidth(true)
                    .ShowBorders(true)
                    .ShowRowLines(true)
                    .Sorting(s => s.Mode(GridSortingMode.None))

                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.GoOutID)
                            .Caption("No.")
                            .AllowEditing(false)
                            .CellTemplate(new JS("onCreateRowNum"))
                            .FormItem(x => x.Visible(false))
                            .AllowFiltering(false)
                            .Width(40);
                        columns.AddFor(m => m.ProdDate)
                            .DataType(GridColumnDataType.Date)
                            .Format(ConstantValues.DateFormat)
                            .Width(120);
                        columns.AddFor(m => m.EmpCode)
                            .Width(120);
                        columns.AddFor(m => m.EmpName);
                        columns.AddFor(m => m.StartTime)
                            .DataType(GridColumnDataType.DateTime)
                            .Format(ConstantValues.TimeStampInOutFormat)
                            .Width(150);
                        columns.AddFor(m => m.EndTime)
                            .DataType(GridColumnDataType.DateTime)
                            .Format(ConstantValues.TimeStampInOutFormat)
                            .Width(150);
                        columns.AddFor(m => m.Reason);
                        columns.AddFor(m => m.UpdateBy)
                            .FormItem(x => x.Visible(false))
                            .Width(120);
                        columns.AddFor(m => m.UpdateDate)
                            .DataType(GridColumnDataType.Date)
                            .Format(ConstantValues.DateFormat)
                            .FormItem(x => x.Visible(false))
                            .Width(130);
                        columns.Add().Width(70).Alignment(HorizontalAlignment.Center).CellTemplate(@<text>
                                @Html.DevExtreme().Button().Template("<img title=\"Edit\" src=\""+ @ConstantValues.EditCommandImageSource + "\">").OnClick("function (e) { editButtonClick(data)}").ElementAttr(new { @class = "button-sm" }).Visible(ViewContext.Controller.HasPermission("ADS020", PermissionName.Edit.Value))
                                @Html.DevExtreme().Button().Template("<img title=\"Delete\" src=\"" + @ConstantValues.DeleteCommandImageSource + "\">").OnClick("function (e) { deleteButtonClick(data)}").ElementAttr(new { @class = "button-sm" }).Visible(ViewContext.Controller.HasPermission("ADS020", PermissionName.Delete.Value))
                         </text>);
                    }
                            )
                    .Paging(p => p.PageSize(ConstantValues.GRID_PAGE_SIZE))
                    .HeaderFilter(f => f.Visible(true))
                    .RemoteOperations(true)
                    .OnEditorPrepared("onEditorPrepared")
                )
            </div>
        </div>
    </form>
</div>

<!--#region Popup  -->
    @*Add Dialog*@
    <div>
        @(Html.DevExtreme().Popup()
                .ID("saveDialog-popup")
                .ElementAttr("class", "popup")
                .Width(650)
                .Height(370)
                .ShowTitle(true)
                .Title("Add - Go Out Reason")
                .Visible(false)
                .DragEnabled(true)
                .CloseOnOutsideClick(false)
        )

        @using (Html.DevExtreme().NamedTemplate("saveDialog-template"))
        {
            <div class="row padding-bottom-10">
                <div class="col-md-3 dx-text text-right">Prod Date <span style="color:red;">*</span></div>
                <div class="col-md-9">
                    <div class="col-md-5" style="padding-left: 0px">
                        @(Html.DevExtreme().DateBoxFor(m => m.ProdDate)
                                        .ID("AddProdDate")
                                        .Min(new DateTime(2000, 1, 1))
                                        .Max(new DateTime(2029, 12, 31))
                                        .Value(DateTime.Now)
                                        .DisplayFormat(ConstantValues.DateFormat)
                                        .Width(132)
                        )
                    </div>
                </div>
            </div>

            <div class="row padding-bottom-10">
                <div class="col-md-3 dx-text text-right">Employee <span style="color:red;">*</span></div>
                <div class="col-md-9">
                    @(Html.DevExtreme().SelectBoxFor(m => m.EmpCode)
                                    .ID("AddEmployee")
                                    .ValueExpr("EmpCode")
                                    .DisplayExpr("EmpName")
                                    .SearchEnabled(true)
                            .DataSource(d => d.Mvc().Controller("Common").LoadAction("GetEmployee")
                                                    .LoadParams(new { IsActiveOnly = true })
                                                    .Key("EmpCode"))
                            .DataSourceOptions(d => d.Paginate(true))
                    )
                </div>
            </div>

            <div class="row padding-bottom-10">
                <div class="col-md-3 dx-text text-right">Date From <span style="color:red;">*</span></div>
                <div class="col-md-3">
                    @(Html.DevExtreme().DateBoxFor(m => m.StartDate)
                                .ID("AddDateFrom")
                                .Type(DateBoxType.Date)
                                .Value(DateTime.Now)
                                .DisplayFormat(ConstantValues.DateFormat)
                                .Width(132)
                    )
                </div>
                <div class="col-md-3" style="padding-left:0px;">
                    @(Html.DevExtreme().DateBoxFor(m => m.StartTime)
                                .ID("AddTimeFrom")
                                .Type(DateBoxType.Time)
                                .Value(DateTime.Now)
                                .DisplayFormat(ConstantValues.TimeFormat)
                                .Width(90)
                    )
                </div>
            </div>

            <div class="row padding-bottom-10">
                <div class="col-md-3 dx-text text-right">Date To <span style="color:red;">*</span></div>
                <div class="col-md-3">
                    @(Html.DevExtreme().DateBoxFor(m => m.EndDate)
                                .ID("AddDateTo")
                                .Type(DateBoxType.Date)
                                .Value(DateTime.Now)
                                .DisplayFormat(ConstantValues.DateFormat)
                                .Width(132)
                    )
                </div>
                <div class="col-md-3" style="padding-left:0px;">
                    @(Html.DevExtreme().DateBoxFor(m => m.EndTime)
                                .ID("AddTimeTo")
                                .Type(DateBoxType.Time)
                                .Value(DateTime.Now)
                                .DisplayFormat(ConstantValues.TimeFormat)
                                .Width(90)
                    )
                </div>
            </div>

            <div class="row padding-bottom-10">
                <div class="col-md-3 dx-text text-right">Go Out Reason <span style="color:red;">*</span></div>
                <div class="col-md-9">
                    @(Html.DevExtreme().TextBoxFor(m => m.Reason)
                                .ID("AddGoOutReason")
                                .ShowClearButton(true)
                    )
                </div>
            </div>

            <div class="row padding-top-10">
                <div class="col-md-12" style="text-align: center;">
                    <div>
                        @(Html.DevExtreme().Button()
                                .ID("btnAddSave")
                                .Text("Save")
                                .OnClick("saveAddDialog")
                                .Type(ButtonType.Success)
                                .Icon("fa fa-save")
                        )
                        @(Html.DevExtreme().Button()
                                .Text("Cancel")
                                .OnClick("CloseSaveDialog")
                                .Type(ButtonType.Danger)
                                .Icon("fa fa-times")
                        )
                    </div>
                </div>
            </div>
        }

    </div>

    @*Edit Dialog*@
    <div>
        @(Html.DevExtreme().Popup()
                .ID("editDialog-popup")
                .ElementAttr("class", "popup")
                .Width(650)
                .Height(370)
                .ShowTitle(true)
                .Title("Edit - Go Out Reason")
                .Visible(false)
                .DragEnabled(true)
                .CloseOnOutsideClick(false)
        )

        @using (Html.DevExtreme().NamedTemplate("editDialog-template"))
        {

            <div class="row padding-bottom-10">
                <div class="col-md-3 dx-text text-right">Prod Date</div>
                <div class="col-md-9">
                    <div class="col-md-5" style="padding-left: 0px">
                        @(Html.DevExtreme().DateBoxFor(m => m.ProdDate)
                                        .ID("EditProdDate")
                                        .DisplayFormat(ConstantValues.DateFormat)
                                        .Width(132)
                                        .Disabled(true)
                        )
                    </div>
                </div>
            </div>

            <div class="row padding-bottom-10">
                <div class="col-md-3 dx-text text-right">Employee</div>
                <div class="col-md-9">
                    @(Html.DevExtreme().SelectBoxFor(m => m.EmpCode)
                                    .ID("EditEmployee")
                                    .ValueExpr("EmpCode")
                                    .DisplayExpr("EmpName")
                                    .Disabled(true)
                            .DataSource(d => d.Mvc().Controller("Common").LoadAction("GetEmployee")
                                                    .LoadParams(new { IsActiveOnly = true })
                                                    .Key("EmpCode"))
                            .DataSourceOptions(d => d.Paginate(true))
                    )
                </div>
            </div>

            <div class="row padding-bottom-10">
                <div class="col-md-3 dx-text text-right">Date From <span style="color:red;">*</span></div>
                <div class="col-md-3">
                    @(Html.DevExtreme().DateBoxFor(m => m.StartDate)
                                .ID("EditDateFrom")
                                .Type(DateBoxType.Date)
                                .Value(DateTime.Now)
                                .DisplayFormat(ConstantValues.DateFormat)
                                .Width(132)
                    )
                </div>
                <div class="col-md-3" style="padding-left:0px;">
                    @(Html.DevExtreme().DateBoxFor(m => m.StartTime)
                                .ID("EditTimeFrom")
                                .Type(DateBoxType.Time)
                                .Value(DateTime.Now)
                                .DisplayFormat(ConstantValues.TimeFormat)
                                .Width(90)
                    )
                </div>
            </div>

            <div class="row padding-bottom-10">
                <div class="col-md-3 dx-text text-right">Date To <span style="color:red;">*</span></div>
                <div class="col-md-3">
                    @(Html.DevExtreme().DateBoxFor(m => m.EndDate)
                                .ID("EditDateTo")
                                .Type(DateBoxType.Date)
                                .Value(DateTime.Now)
                                .DisplayFormat(ConstantValues.DateFormat)
                                .Width(132)
                    )
                </div>
                <div class="col-md-3" style="padding-left:0px;">
                    @(Html.DevExtreme().DateBoxFor(m => m.EndTime)
                                .ID("EditTimeTo")
                                .Type(DateBoxType.Time)
                                .DisplayFormat(ConstantValues.TimeFormat)
                                .Width(90)
                    )
                </div>
            </div>

            <div class="row padding-bottom-10">
                <div class="col-md-3 dx-text text-right">Go Out Reason <span style="color:red;">*</span></div>
                <div class="col-md-9">
                    @(Html.DevExtreme().TextBoxFor(m => m.Reason)
                                .ID("EditGoOutReason")
                                .ShowClearButton(true)
                    )
                </div>
            </div>

            <div class="row padding-top-10">
                <div class="col-md-12" style="text-align: center;">
                    <div>
                        @(Html.DevExtreme().Button()
                                .ID("btnEditSave")
                                .Text("Save")
                                .OnClick("saveEditDialog")
                                .Type(ButtonType.Success)
                                .Icon("fa fa-save")
                        )
                        @(Html.DevExtreme().Button()
                                .Text("Cancel")
                                .OnClick("CloseEditDialog")
                                .Type(ButtonType.Danger)
                                .Icon("fa fa-times")
                        )
                    </div>
                </div>
            </div>
        }
    </div>
<!--#endregion -->


@section script{
<script type="text/javascript">

    var isFirstLoad = true;

    function onCreateRowNum(cellElement, cellInfo) {
        cellElement.text((cellInfo.component.pageSize() * cellInfo.component.pageIndex()) + cellInfo.row.rowIndex + 1)
        //
    }

    function onbtnSearchClick(e) {
        isFirstLoad = false;
        $("#gridContainer").dxDataGrid("refresh");
    }

    function onbtnClearClick() {
        isFirstLoad = true;
        $("#txtEmployee").dxTextBox("instance").option("value", "");
        $("#txtFullName").dxTextBox("instance").option("value", "");
        $("#DateFrom").dxDateBox("instance").option("value", new Date());
        $("#DateTo").dxDateBox("instance").option("value", new Date());
        $("#gridContainer").dxDataGrid("instance").refresh();
    }

    function getSearchEmployee() {
        return $("#txtEmployee").dxTextBox("instance").option("value");
    }

    function getSearchFullname() {
        return $("#txtFullName").dxTextBox("instance").option("value");
    }

    function getSearchDateFrom() {
        return $("#DateFrom").dxDateBox("instance").option("text");
    }

    function getSearchDateTo() {
        return $("#DateTo").dxDateBox("instance").option("text");
    }

    function onButtonAddClick(e) {
        var popup = $("#saveDialog-popup").dxPopup("instance");
        popup.option("contentTemplate", $("#saveDialog-template"));
        popup.show();

        e.validationGroup.reset();
        var today = new Date();
        $("#AddProdDate").dxDateBox("instance").option("value", today);
        $("#AddDateFrom").dxDateBox("instance").option("value", today);
        $("#AddTimeFrom").dxDateBox("instance").option("value", today);
        $("#AddDateTo").dxDateBox("instance").option("value", today);
        $("#AddTimeTo").dxDateBox("instance").option("value", today);
        $("#AddGoOutReason").dxTextBox("instance").option("value", "");
    }

    function saveAddDialog(params) {
        if (params.validationGroup.validate().isValid) {
            var result = DevExpress.ui.dialog.confirm("@MessageListResource.C0001", "Confirm Save");
            result.done(function (dialogResult) {
                if (dialogResult) {
                    var criteria = {
                        EmpCode: $("#AddEmployee").dxSelectBox("instance").option("value"),
                        ProdDate: $("#AddProdDate").dxDateBox("instance").option("value"),
                        Reason: $("#AddGoOutReason").dxTextBox("instance").option("value"),
                        StartDate: $("#AddDateFrom").dxDateBox("instance").option("text"),
                        StartTime: $("#AddTimeFrom").dxDateBox("instance").option("text"),
                        EndDate: $("#AddDateTo").dxDateBox("instance").option("text"),
                        EndTime: $("#AddTimeTo").dxDateBox("instance").option("text")
                    }
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("InsertGoOutReason", "GoOutReason")",
                        dataType: "json",
                        data: { values: JSON.stringify(criteria) },
                        success: function (data, status, xhr) {
                            CloseSaveDialog();

                            if (data.ErrorType == "@ConstantValues.TypeError") {
                                app.ui.showNotifyMessage('@ToastType.Error', data.ErrorMessage);
                            }
                            if (data.ErrorType == "@ConstantValues.TypeWarning") {
                                app.ui.showNotifyMessage('@ToastType.Warning', data.ErrorMessage);
                            }
                            if (data.ErrorType == "@ConstantValues.TypeInfo") {
                                app.ui.showNotifyMessage('@ToastType.Success', data.ErrorMessage);
                            }

                            onbtnSearchClick();
                        },
                        error: function (xhr, statu, error) {
                            CloseSaveDialog();
                            var message = app.ui.handleAjaxError(xhr, status, error);
                            app.ui.showNotifyMessage('@ToastType.Error', message);
                        }
                    })
                }
            });
        }

        return false;
    }

    function CloseSaveDialog(e) {
        $("#saveDialog-popup").dxPopup("hide");
    }

    function editButtonClick(data) {
        var popup = $("#editDialog-popup").dxPopup("instance");
        popup.option("contentTemplate", $("#editDialog-template"));
        popup.show();

        $("#EditProdDate").dxDateBox("instance").option("value", data.ProdDate);
        $("#EditEmployee").dxSelectBox("instance").option("value", data.EmpCode);
        $("#EditDateFrom").dxDateBox("instance").option("value", data.StartTime);
        $("#EditTimeFrom").dxDateBox("instance").option("value", data.StartTime);
        $("#EditDateTo").dxDateBox("instance").option("value", data.EndTime);
        $("#EditTimeTo").dxDateBox("instance").option("value", data.EndTime);
        $("#EditGoOutReason").dxTextBox("instance").option("value", data.Reason);
    }

    function CloseEditDialog(e) {
        //e.validationGroup.reset();
        $("#editDialog-popup").dxPopup("hide");
    }

    function saveEditDialog(params) {
        if (params.validationGroup.validate().isValid) {
            var result = DevExpress.ui.dialog.confirm("@MessageListResource.C0001", "Confirm Update");
            result.done(function (dialogResult) {
                if (dialogResult) {
                    var criteria = {
                        EmpCode: $("#EditEmployee").dxSelectBox("instance").option("value"),
                        ProdDate: $("#EditProdDate").dxDateBox("instance").option("value"),
                        Reason: $("#EditGoOutReason").dxTextBox("instance").option("value"),
                        StartDate: $("#EditDateFrom").dxDateBox("instance").option("text"),
                        StartTime: $("#EditTimeFrom").dxDateBox("instance").option("text"),
                        EndDate: $("#EditDateTo").dxDateBox("instance").option("text"),
                        EndTime: $("#EditTimeTo").dxDateBox("instance").option("text")
                    }
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("UpdateGoOutReason", "GoOutReason")",
                        dataType: "json",
                        data: { values: JSON.stringify(criteria) },
                        success: function (data, status, xhr) {
                            CloseEditDialog();

                            if (data.ErrorType == "@ConstantValues.TypeError") {
                                app.ui.showNotifyMessage('@ToastType.Error', data.ErrorMessage);
                            }
                            if (data.ErrorType == "@ConstantValues.TypeWarning") {
                                app.ui.showNotifyMessage('@ToastType.Warning', data.ErrorMessage);
                            }
                            if (data.ErrorType == "@ConstantValues.TypeInfo") {
                                app.ui.showNotifyMessage('@ToastType.Success', data.ErrorMessage);
                            }

                            onbtnSearchClick();
                        },
                        error: function (xhr, statu, error) {
                            CloseEditDialog();
                            var message = app.ui.handleAjaxError(xhr, status, error);
                            app.ui.showNotifyMessage('@ToastType.Error', message);
                        }
                    })
                }
            });
        }
        return false;
    }

    function deleteButtonClick(data) {
        var result = DevExpress.ui.dialog.confirm(format("@MessageListResource.C0002", " Emp no. " + data.EmpCode + " on " + formatDate(data.ProdDate)), "Confirm Delete");
        result.done(function (dialogResult) {
            if (dialogResult) {
                var criteria = {
                    GoOutID: data.GoOutID,
                }
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("DeleteGoOutReason", "GoOutReason")",
                    dataType: "json",
                    data: { values: JSON.stringify(criteria) },
                    success: function (data, status, xhr) {
                        if (data.ErrorType == "@ConstantValues.TypeError") {
                            app.ui.showNotifyMessage('@ToastType.Error', data.ErrorMessage);
                        }
                        if (data.ErrorType == "@ConstantValues.TypeWarning") {
                            app.ui.showNotifyMessage('@ToastType.Warning', data.ErrorMessage);
                        }
                        if (data.ErrorType == "@ConstantValues.TypeInfo") {
                            app.ui.showNotifyMessage('@ToastType.Success', data.ErrorMessage);
                        }

                        onbtnSearchClick();
                    },
                    error: function (xhr, statu, error) {
                        var message = app.ui.handleAjaxError(xhr, status, error);
                        app.ui.showNotifyMessage('@ToastType.Error', message);
                    }
                })
            }
        });
    }

    function formatDate(date) {
        var months = [
            'Jan', 'Feb', 'Mar', 'Apr', 'May',
            'Jun', 'Jul', 'Aug', 'Sep',
            'Oct', 'Nov', 'Dec'
        ];

        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        var monthName = months[month];
        //if (month.length < 2) month = '0' + month;
        if (day.length < 2) day = '0' + day;

        return [day, monthName, year].join('/');
    }

    function format(fmtstr) {
        var args = Array.prototype.slice.call(arguments, 1);
        return fmtstr.replace(/\{(\d+)\}/g, function (match, index) {
            return args[index];
        });
    }

    function onEditorPrepared(e) {
        app.ui.ResetReadOnlyControlBackgroundColor();
    }

    function onShowing(e) {
        app.ui.AddBackgroundColorPopupButton();
    }

</script>

}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STM.ATDB.Model.Common
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CommonEntities : DbContext
    {
        public CommonEntities()
            : base("name=CommonEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetProductionDate(Nullable<System.DateTime> prodDate)
        {
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetProductionDate", prodDateParameter);
        }
    
        public virtual ObjectResult<EmpComboResult> GetEmpCombo(Nullable<System.DateTime> prodDateFrom, Nullable<System.DateTime> prodDateTo, string empCode, Nullable<bool> isActiveOnly)
        {
            var prodDateFromParameter = prodDateFrom.HasValue ?
                new ObjectParameter("ProdDateFrom", prodDateFrom) :
                new ObjectParameter("ProdDateFrom", typeof(System.DateTime));
    
            var prodDateToParameter = prodDateTo.HasValue ?
                new ObjectParameter("ProdDateTo", prodDateTo) :
                new ObjectParameter("ProdDateTo", typeof(System.DateTime));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var isActiveOnlyParameter = isActiveOnly.HasValue ?
                new ObjectParameter("IsActiveOnly", isActiveOnly) :
                new ObjectParameter("IsActiveOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmpComboResult>("GetEmpCombo", prodDateFromParameter, prodDateToParameter, empCodeParameter, isActiveOnlyParameter);
        }
    
        public virtual ObjectResult<MiscCombo> GetMiscCombo(string fieldName, Nullable<bool> isActive)
        {
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MiscCombo>("GetMiscCombo", fieldNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<DepartmentCombo> GetDepartmentCombo(Nullable<System.DateTime> prodDate, Nullable<System.DateTime> prodDateFrom, Nullable<System.DateTime> prodDateTo, string divCodeKey, string deptCodeKey, string userCode, Nullable<bool> isActiveOnly)
        {
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var prodDateFromParameter = prodDateFrom.HasValue ?
                new ObjectParameter("ProdDateFrom", prodDateFrom) :
                new ObjectParameter("ProdDateFrom", typeof(System.DateTime));
    
            var prodDateToParameter = prodDateTo.HasValue ?
                new ObjectParameter("ProdDateTo", prodDateTo) :
                new ObjectParameter("ProdDateTo", typeof(System.DateTime));
    
            var divCodeKeyParameter = divCodeKey != null ?
                new ObjectParameter("DivCodeKey", divCodeKey) :
                new ObjectParameter("DivCodeKey", typeof(string));
    
            var deptCodeKeyParameter = deptCodeKey != null ?
                new ObjectParameter("DeptCodeKey", deptCodeKey) :
                new ObjectParameter("DeptCodeKey", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var isActiveOnlyParameter = isActiveOnly.HasValue ?
                new ObjectParameter("IsActiveOnly", isActiveOnly) :
                new ObjectParameter("IsActiveOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepartmentCombo>("GetDepartmentCombo", prodDateParameter, prodDateFromParameter, prodDateToParameter, divCodeKeyParameter, deptCodeKeyParameter, userCodeParameter, isActiveOnlyParameter);
        }
    
        public virtual ObjectResult<DivisionCombo> GetDivisionCombo(Nullable<System.DateTime> prodDate, Nullable<System.DateTime> prodDateFrom, Nullable<System.DateTime> prodDateTo, string divCodeKey, string userCode, Nullable<bool> isActiveOnly)
        {
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var prodDateFromParameter = prodDateFrom.HasValue ?
                new ObjectParameter("ProdDateFrom", prodDateFrom) :
                new ObjectParameter("ProdDateFrom", typeof(System.DateTime));
    
            var prodDateToParameter = prodDateTo.HasValue ?
                new ObjectParameter("ProdDateTo", prodDateTo) :
                new ObjectParameter("ProdDateTo", typeof(System.DateTime));
    
            var divCodeKeyParameter = divCodeKey != null ?
                new ObjectParameter("DivCodeKey", divCodeKey) :
                new ObjectParameter("DivCodeKey", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var isActiveOnlyParameter = isActiveOnly.HasValue ?
                new ObjectParameter("IsActiveOnly", isActiveOnly) :
                new ObjectParameter("IsActiveOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DivisionCombo>("GetDivisionCombo", prodDateParameter, prodDateFromParameter, prodDateToParameter, divCodeKeyParameter, userCodeParameter, isActiveOnlyParameter);
        }
    
        public virtual ObjectResult<SectionCombo> GetSectionCombo(Nullable<System.DateTime> prodDate, Nullable<System.DateTime> prodDateFrom, Nullable<System.DateTime> prodDateTo, string deptCodeKey, string secCodeKey, string userCode, Nullable<bool> isActiveOnly)
        {
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var prodDateFromParameter = prodDateFrom.HasValue ?
                new ObjectParameter("ProdDateFrom", prodDateFrom) :
                new ObjectParameter("ProdDateFrom", typeof(System.DateTime));
    
            var prodDateToParameter = prodDateTo.HasValue ?
                new ObjectParameter("ProdDateTo", prodDateTo) :
                new ObjectParameter("ProdDateTo", typeof(System.DateTime));
    
            var deptCodeKeyParameter = deptCodeKey != null ?
                new ObjectParameter("DeptCodeKey", deptCodeKey) :
                new ObjectParameter("DeptCodeKey", typeof(string));
    
            var secCodeKeyParameter = secCodeKey != null ?
                new ObjectParameter("SecCodeKey", secCodeKey) :
                new ObjectParameter("SecCodeKey", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var isActiveOnlyParameter = isActiveOnly.HasValue ?
                new ObjectParameter("IsActiveOnly", isActiveOnly) :
                new ObjectParameter("IsActiveOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SectionCombo>("GetSectionCombo", prodDateParameter, prodDateFromParameter, prodDateToParameter, deptCodeKeyParameter, secCodeKeyParameter, userCodeParameter, isActiveOnlyParameter);
        }
    
        public virtual ObjectResult<GroupCombo> GetGroupCombo(Nullable<System.DateTime> prodDate, string userCode)
        {
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GroupCombo>("GetGroupCombo", prodDateParameter, userCodeParameter);
        }
    }
}

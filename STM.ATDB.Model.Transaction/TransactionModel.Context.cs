//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace STM.ATDB.Model.Transaction
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TransactionEntities : DbContext
    {
        public TransactionEntities()
            : base("name=TransactionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<SearchDashboard_Result> SearchDashboard(string divCode, string deptCode, string secCode, string userCode, ObjectParameter divName, ObjectParameter workHC, ObjectParameter totalHC, ObjectParameter workPercent, ObjectParameter maxColumn)
        {
            var divCodeParameter = divCode != null ?
                new ObjectParameter("DivCode", divCode) :
                new ObjectParameter("DivCode", typeof(string));
    
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            var secCodeParameter = secCode != null ?
                new ObjectParameter("SecCode", secCode) :
                new ObjectParameter("SecCode", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchDashboard_Result>("SearchDashboard", divCodeParameter, deptCodeParameter, secCodeParameter, userCodeParameter, divName, workHC, totalHC, workPercent, maxColumn);
        }
    
        public virtual ObjectResult<GetDepartmentComboResult> GetDepartmentCombo(Nullable<System.DateTime> prodDate, string divCode, string userCode)
        {
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var divCodeParameter = divCode != null ?
                new ObjectParameter("DivCode", divCode) :
                new ObjectParameter("DivCode", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDepartmentComboResult>("GetDepartmentCombo", prodDateParameter, divCodeParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<GetDivisionComboResult> GetDivisionCombo(Nullable<System.DateTime> prodDate, string userCode)
        {
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDivisionComboResult>("GetDivisionCombo", prodDateParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<GetSectionComboResult> GetSectionCombo(Nullable<System.DateTime> prodDate, string deptCode, string userCode)
        {
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSectionComboResult>("GetSectionCombo", prodDateParameter, deptCodeParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<GoOutReason> SearchGoOutReason(Nullable<System.DateTime> prodDateFrom, Nullable<System.DateTime> prodDateTo, string empCode, string empName, string userCode)
        {
            var prodDateFromParameter = prodDateFrom.HasValue ?
                new ObjectParameter("ProdDateFrom", prodDateFrom) :
                new ObjectParameter("ProdDateFrom", typeof(System.DateTime));
    
            var prodDateToParameter = prodDateTo.HasValue ?
                new ObjectParameter("ProdDateTo", prodDateTo) :
                new ObjectParameter("ProdDateTo", typeof(System.DateTime));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoOutReason>("SearchGoOutReason", prodDateFromParameter, prodDateToParameter, empCodeParameter, empNameParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> IsDuplicateKeyGoOutReason(Nullable<System.DateTime> prodDate, string empCode)
        {
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("IsDuplicateKeyGoOutReason", prodDateParameter, empCodeParameter);
        }
    
        public virtual ObjectResult<UpdateUserStatusResult> UpdateUserStatus(string empCodeXML, string userStatus, string userCode)
        {
            var empCodeXMLParameter = empCodeXML != null ?
                new ObjectParameter("EmpCodeXML", empCodeXML) :
                new ObjectParameter("EmpCodeXML", typeof(string));
    
            var userStatusParameter = userStatus != null ?
                new ObjectParameter("UserStatus", userStatus) :
                new ObjectParameter("UserStatus", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateUserStatusResult>("UpdateUserStatus", empCodeXMLParameter, userStatusParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<DeleteHideOrgResult> DeleteHideOrg(string orgCode, Nullable<System.DateTime> hideDateFrom, string userCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var hideDateFromParameter = hideDateFrom.HasValue ?
                new ObjectParameter("HideDateFrom", hideDateFrom) :
                new ObjectParameter("HideDateFrom", typeof(System.DateTime));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteHideOrgResult>("DeleteHideOrg", orgCodeParameter, hideDateFromParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<SaveGoOutReasonResult> SaveGoOutReason(string mode, Nullable<int> goOutID, Nullable<System.DateTime> prodDate, string empCode, string reason, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, string userCode)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var goOutIDParameter = goOutID.HasValue ?
                new ObjectParameter("GoOutID", goOutID) :
                new ObjectParameter("GoOutID", typeof(int));
    
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaveGoOutReasonResult>("SaveGoOutReason", modeParameter, goOutIDParameter, prodDateParameter, empCodeParameter, reasonParameter, startTimeParameter, endTimeParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<GoOutReason> GetGoOutReasonID(Nullable<int> goOutID)
        {
            var goOutIDParameter = goOutID.HasValue ?
                new ObjectParameter("GoOutID", goOutID) :
                new ObjectParameter("GoOutID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GoOutReason>("GetGoOutReasonID", goOutIDParameter);
        }
    
        public virtual ObjectResult<DeleteGoOutReasonResult> DeleteGoOutReason(Nullable<int> goOutID, string userCode)
        {
            var goOutIDParameter = goOutID.HasValue ?
                new ObjectParameter("GoOutID", goOutID) :
                new ObjectParameter("GoOutID", typeof(int));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteGoOutReasonResult>("DeleteGoOutReason", goOutIDParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<HideOrg> SearchHideOrg(Nullable<System.DateTime> prodDateFrom, Nullable<System.DateTime> prodDateTo, string divCodeKey, string deptCodeKey, string secCodeKey, string orgCode, Nullable<System.DateTime> hideDateFrom)
        {
            var prodDateFromParameter = prodDateFrom.HasValue ?
                new ObjectParameter("ProdDateFrom", prodDateFrom) :
                new ObjectParameter("ProdDateFrom", typeof(System.DateTime));
    
            var prodDateToParameter = prodDateTo.HasValue ?
                new ObjectParameter("ProdDateTo", prodDateTo) :
                new ObjectParameter("ProdDateTo", typeof(System.DateTime));
    
            var divCodeKeyParameter = divCodeKey != null ?
                new ObjectParameter("DivCodeKey", divCodeKey) :
                new ObjectParameter("DivCodeKey", typeof(string));
    
            var deptCodeKeyParameter = deptCodeKey != null ?
                new ObjectParameter("DeptCodeKey", deptCodeKey) :
                new ObjectParameter("DeptCodeKey", typeof(string));
    
            var secCodeKeyParameter = secCodeKey != null ?
                new ObjectParameter("SecCodeKey", secCodeKey) :
                new ObjectParameter("SecCodeKey", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var hideDateFromParameter = hideDateFrom.HasValue ?
                new ObjectParameter("HideDateFrom", hideDateFrom) :
                new ObjectParameter("HideDateFrom", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HideOrg>("SearchHideOrg", prodDateFromParameter, prodDateToParameter, divCodeKeyParameter, deptCodeKeyParameter, secCodeKeyParameter, orgCodeParameter, hideDateFromParameter);
        }
    
        public virtual ObjectResult<SaveHideOrgResult> SaveHideOrg(string mode, Nullable<System.DateTime> hideDateFrom, Nullable<System.DateTime> hideDateTo, string orgCode, string divCodeKey, string deptCodeKey, string secCodeKey, string userCode)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var hideDateFromParameter = hideDateFrom.HasValue ?
                new ObjectParameter("HideDateFrom", hideDateFrom) :
                new ObjectParameter("HideDateFrom", typeof(System.DateTime));
    
            var hideDateToParameter = hideDateTo.HasValue ?
                new ObjectParameter("HideDateTo", hideDateTo) :
                new ObjectParameter("HideDateTo", typeof(System.DateTime));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var divCodeKeyParameter = divCodeKey != null ?
                new ObjectParameter("DivCodeKey", divCodeKey) :
                new ObjectParameter("DivCodeKey", typeof(string));
    
            var deptCodeKeyParameter = deptCodeKey != null ?
                new ObjectParameter("DeptCodeKey", deptCodeKey) :
                new ObjectParameter("DeptCodeKey", typeof(string));
    
            var secCodeKeyParameter = secCodeKey != null ?
                new ObjectParameter("SecCodeKey", secCodeKey) :
                new ObjectParameter("SecCodeKey", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaveHideOrgResult>("SaveHideOrg", modeParameter, hideDateFromParameter, hideDateToParameter, orgCodeParameter, divCodeKeyParameter, deptCodeKeyParameter, secCodeKeyParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<EmployeeSetting> SearchEmpSetting(string searchEmpCode, string searchEmpName, string divCodeKey, string deptCodeKey, string secCodeKey, string empStatus, string userStatus, string displayStatus, Nullable<bool> isViewActiveOrg, string userCode)
        {
            var searchEmpCodeParameter = searchEmpCode != null ?
                new ObjectParameter("SearchEmpCode", searchEmpCode) :
                new ObjectParameter("SearchEmpCode", typeof(string));
    
            var searchEmpNameParameter = searchEmpName != null ?
                new ObjectParameter("SearchEmpName", searchEmpName) :
                new ObjectParameter("SearchEmpName", typeof(string));
    
            var divCodeKeyParameter = divCodeKey != null ?
                new ObjectParameter("DivCodeKey", divCodeKey) :
                new ObjectParameter("DivCodeKey", typeof(string));
    
            var deptCodeKeyParameter = deptCodeKey != null ?
                new ObjectParameter("DeptCodeKey", deptCodeKey) :
                new ObjectParameter("DeptCodeKey", typeof(string));
    
            var secCodeKeyParameter = secCodeKey != null ?
                new ObjectParameter("SecCodeKey", secCodeKey) :
                new ObjectParameter("SecCodeKey", typeof(string));
    
            var empStatusParameter = empStatus != null ?
                new ObjectParameter("EmpStatus", empStatus) :
                new ObjectParameter("EmpStatus", typeof(string));
    
            var userStatusParameter = userStatus != null ?
                new ObjectParameter("UserStatus", userStatus) :
                new ObjectParameter("UserStatus", typeof(string));
    
            var displayStatusParameter = displayStatus != null ?
                new ObjectParameter("DisplayStatus", displayStatus) :
                new ObjectParameter("DisplayStatus", typeof(string));
    
            var isViewActiveOrgParameter = isViewActiveOrg.HasValue ?
                new ObjectParameter("IsViewActiveOrg", isViewActiveOrg) :
                new ObjectParameter("IsViewActiveOrg", typeof(bool));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeSetting>("SearchEmpSetting", searchEmpCodeParameter, searchEmpNameParameter, divCodeKeyParameter, deptCodeKeyParameter, secCodeKeyParameter, empStatusParameter, userStatusParameter, displayStatusParameter, isViewActiveOrgParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<UpdateDisplayStatusResult> UpdateDisplayStatus(string empCodeXML, string displayStatus, string userCode)
        {
            var empCodeXMLParameter = empCodeXML != null ?
                new ObjectParameter("EmpCodeXML", empCodeXML) :
                new ObjectParameter("EmpCodeXML", typeof(string));
    
            var displayStatusParameter = displayStatus != null ?
                new ObjectParameter("DisplayStatus", displayStatus) :
                new ObjectParameter("DisplayStatus", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateDisplayStatusResult>("UpdateDisplayStatus", empCodeXMLParameter, displayStatusParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<ResetPasswordResult> ResetPassword(string empCodeXML, string userCode)
        {
            var empCodeXMLParameter = empCodeXML != null ?
                new ObjectParameter("EmpCodeXML", empCodeXML) :
                new ObjectParameter("EmpCodeXML", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ResetPasswordResult>("ResetPassword", empCodeXMLParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<SaveFixOrgByEmpResult> SaveFixOrgByEmp(string mode, string empCode, Nullable<System.DateTime> effectiveDateFrom, Nullable<System.DateTime> effectiveDateTo, string divCodeKey, string deptCodeKey, string secCodeKey, string userCode)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var effectiveDateFromParameter = effectiveDateFrom.HasValue ?
                new ObjectParameter("EffectiveDateFrom", effectiveDateFrom) :
                new ObjectParameter("EffectiveDateFrom", typeof(System.DateTime));
    
            var effectiveDateToParameter = effectiveDateTo.HasValue ?
                new ObjectParameter("EffectiveDateTo", effectiveDateTo) :
                new ObjectParameter("EffectiveDateTo", typeof(System.DateTime));
    
            var divCodeKeyParameter = divCodeKey != null ?
                new ObjectParameter("DivCodeKey", divCodeKey) :
                new ObjectParameter("DivCodeKey", typeof(string));
    
            var deptCodeKeyParameter = deptCodeKey != null ?
                new ObjectParameter("DeptCodeKey", deptCodeKey) :
                new ObjectParameter("DeptCodeKey", typeof(string));
    
            var secCodeKeyParameter = secCodeKey != null ?
                new ObjectParameter("SecCodeKey", secCodeKey) :
                new ObjectParameter("SecCodeKey", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaveFixOrgByEmpResult>("SaveFixOrgByEmp", modeParameter, empCodeParameter, effectiveDateFromParameter, effectiveDateToParameter, divCodeKeyParameter, deptCodeKeyParameter, secCodeKeyParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<FixOrgEmp> SearchFixOrgByEmp(Nullable<System.DateTime> prodDateFrom, Nullable<System.DateTime> prodDateTo, string searchEmpCode, string searchEmpName, string empCode, Nullable<System.DateTime> effectiveDateFrom)
        {
            var prodDateFromParameter = prodDateFrom.HasValue ?
                new ObjectParameter("ProdDateFrom", prodDateFrom) :
                new ObjectParameter("ProdDateFrom", typeof(System.DateTime));
    
            var prodDateToParameter = prodDateTo.HasValue ?
                new ObjectParameter("ProdDateTo", prodDateTo) :
                new ObjectParameter("ProdDateTo", typeof(System.DateTime));
    
            var searchEmpCodeParameter = searchEmpCode != null ?
                new ObjectParameter("SearchEmpCode", searchEmpCode) :
                new ObjectParameter("SearchEmpCode", typeof(string));
    
            var searchEmpNameParameter = searchEmpName != null ?
                new ObjectParameter("SearchEmpName", searchEmpName) :
                new ObjectParameter("SearchEmpName", typeof(string));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var effectiveDateFromParameter = effectiveDateFrom.HasValue ?
                new ObjectParameter("EffectiveDateFrom", effectiveDateFrom) :
                new ObjectParameter("EffectiveDateFrom", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FixOrgEmp>("SearchFixOrgByEmp", prodDateFromParameter, prodDateToParameter, searchEmpCodeParameter, searchEmpNameParameter, empCodeParameter, effectiveDateFromParameter);
        }
    
        public virtual ObjectResult<DeleteFixOrgByEmpResult> DeleteFixOrgByEmp(string empCode, Nullable<System.DateTime> effectiveDateFrom, string userCode)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var effectiveDateFromParameter = effectiveDateFrom.HasValue ?
                new ObjectParameter("EffectiveDateFrom", effectiveDateFrom) :
                new ObjectParameter("EffectiveDateFrom", typeof(System.DateTime));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteFixOrgByEmpResult>("DeleteFixOrgByEmp", empCodeParameter, effectiveDateFromParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<AssignWorkShiftByEmp> SearchWorkShiftByEmp(Nullable<System.DateTime> prodDateFrom, Nullable<System.DateTime> prodDateTo, string searchEmpCode, string searchEmpName, string shiftCode, Nullable<System.DateTime> prodDate, string empCode)
        {
            var prodDateFromParameter = prodDateFrom.HasValue ?
                new ObjectParameter("ProdDateFrom", prodDateFrom) :
                new ObjectParameter("ProdDateFrom", typeof(System.DateTime));
    
            var prodDateToParameter = prodDateTo.HasValue ?
                new ObjectParameter("ProdDateTo", prodDateTo) :
                new ObjectParameter("ProdDateTo", typeof(System.DateTime));
    
            var searchEmpCodeParameter = searchEmpCode != null ?
                new ObjectParameter("SearchEmpCode", searchEmpCode) :
                new ObjectParameter("SearchEmpCode", typeof(string));
    
            var searchEmpNameParameter = searchEmpName != null ?
                new ObjectParameter("SearchEmpName", searchEmpName) :
                new ObjectParameter("SearchEmpName", typeof(string));
    
            var shiftCodeParameter = shiftCode != null ?
                new ObjectParameter("ShiftCode", shiftCode) :
                new ObjectParameter("ShiftCode", typeof(string));
    
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AssignWorkShiftByEmp>("SearchWorkShiftByEmp", prodDateFromParameter, prodDateToParameter, searchEmpCodeParameter, searchEmpNameParameter, shiftCodeParameter, prodDateParameter, empCodeParameter);
        }
    
        public virtual ObjectResult<InsertWorkShiftByEmpResult> InsertWorkShiftByEmp(Nullable<System.DateTime> prodDateFrom, Nullable<System.DateTime> prodDateTo, string empCode, string shiftCode, string userCode)
        {
            var prodDateFromParameter = prodDateFrom.HasValue ?
                new ObjectParameter("ProdDateFrom", prodDateFrom) :
                new ObjectParameter("ProdDateFrom", typeof(System.DateTime));
    
            var prodDateToParameter = prodDateTo.HasValue ?
                new ObjectParameter("ProdDateTo", prodDateTo) :
                new ObjectParameter("ProdDateTo", typeof(System.DateTime));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var shiftCodeParameter = shiftCode != null ?
                new ObjectParameter("ShiftCode", shiftCode) :
                new ObjectParameter("ShiftCode", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertWorkShiftByEmpResult>("InsertWorkShiftByEmp", prodDateFromParameter, prodDateToParameter, empCodeParameter, shiftCodeParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<UpdateWorkShiftByEmpResult> UpdateWorkShiftByEmp(Nullable<System.DateTime> prodDate, string empCode, string shiftCode, string userCode)
        {
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var shiftCodeParameter = shiftCode != null ?
                new ObjectParameter("ShiftCode", shiftCode) :
                new ObjectParameter("ShiftCode", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateWorkShiftByEmpResult>("UpdateWorkShiftByEmp", prodDateParameter, empCodeParameter, shiftCodeParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<DeleteWorkShiftByEmpResult> DeleteWorkShiftByEmp(Nullable<System.DateTime> prodDate, string empCode, string userCode)
        {
            var prodDateParameter = prodDate.HasValue ?
                new ObjectParameter("ProdDate", prodDate) :
                new ObjectParameter("ProdDate", typeof(System.DateTime));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeleteWorkShiftByEmpResult>("DeleteWorkShiftByEmp", prodDateParameter, empCodeParameter, userCodeParameter);
        }
    }
}
